name: Visualize Survey Data on Map

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.json'  # Trigger on JSON file changes (survey data)
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to visualize'
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write

jobs:
  generate-map:
    runs-on: ubuntu-latest

    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || ${{ inputs.pr_number }};
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            core.setOutput('number', prNumber);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('head_ref', pr.head.ref);

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.head_sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install PyGithub

      - name: Extract survey data and generate map
        id: generate_map
        run: |
          python .github/scripts/generate_survey_map.py \
            --pr-number ${{ steps.pr.outputs.number }} \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post map as PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const mapHtml = fs.readFileSync('survey_map.html', 'utf8');

            // Create collapsible section for the map
            const comment = `## üó∫Ô∏è Survey Data Visualization

            <details open>
            <summary>Click to expand interactive map</summary>

            ${mapHtml}

            </details>

            **Legend:**
            - üî¥ Red markers: Runway corners (C1, C2, C3, C4)
            - üü¢ Green line: Runway centerline
            - üü° Yellow markers: Touchdown points (TD1, TD2)
            - üîµ Blue markers: Thresholds (THR1, THR2)

            ---
            *Map automatically generated from survey data in this PR*`;

            // Get PR number from context or input
            const prNumber = context.payload.pull_request?.number || ${{ steps.pr.outputs.number }};

            // Check if we already posted a comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('Survey Data Visualization')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }
